// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Language {
  id                   String @id @db.VarChar(10)
  name                 String @db.VarChar(500)
  code                 String @unique @db.VarChar(10)

  // Relations
  userTranslations     UserTranslation[]
  productTranslations  ProductTranslation[]
  categoryTranslations CategoryTranslation[]
  brandTranslations    BrandTranslation[]

  // Audit fields
  createdById Int?
  createdBy   User? @relation("LanguageCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("LanguageUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("LanguageDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([deletedAt])
}

model User {
  id          Int        @id @default(autoincrement())
  email       String     @unique @db.VarChar(500)
  name        String     @db.VarChar(500)
  password    String     @db.VarChar(500)
  phoneNumber String     @db.VarChar(50)
  avatar      String?    @db.VarChar(1000)
  cover      String?    @db.VarChar(1000)
  totpSecret  String?    @db.VarChar(1000)
  status      UserStatus @default(INACTIVE)
  roleId      Int

  // Relations
  role Role @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  // Device and authentication
  devices       Device[]
  refreshTokens RefreshToken[]

  // Verification Codes
  verificationCodes VerificationCode[]

  // E-commerce relations
  carts   CartItem[]
  orders  Order[]
  reviews Review[]

  // Translation relation
  userTranslations UserTranslation[] @relation("User")

  // Messaging
  sentMessages     Message[]   @relation("FromUser")
  receivedMessages Message[]   @relation("ToUser")
  webSockets       Websocket[]

  // Self-referencing relations
  createdById  Int?
  createdBy    User?  @relation("CreatorUsers", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  createdUsers User[] @relation("CreatorUsers")

  updatedById  Int?
  updatedBy    User?  @relation("UpdatorUsers", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedUsers User[] @relation("UpdatorUsers")

  deletedById  Int?
  deletedBy    User?  @relation("DeletorUsers", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedUsers User[] @relation("DeletorUsers")

  // Created/Updated/Deleted relations for all entities
  createdLanguages            Language[]            @relation("LanguageCreatedBy")
  updatedLanguages            Language[]            @relation("LanguageUpdatedBy")
  deletedLanguages            Language[]            @relation("LanguageDeletedBy")
  createdPermissions          Permission[]          @relation("PermissionCreatedBy")
  updatedPermissions          Permission[]          @relation("PermissionUpdatedBy")
  deletedPermissions          Permission[]          @relation("PermissionDeletedBy")
  createdRoles                Role[]                @relation("RoleCreatedBy")
  updatedRoles                Role[]                @relation("RoleUpdatedBy")
  deletedRoles                Role[]                @relation("RoleDeletedBy")
  createdProducts             Product[]             @relation("ProductCreatedBy")
  updatedProducts             Product[]             @relation("ProductUpdatedBy")
  deletedProducts             Product[]             @relation("ProductDeletedBy")
  createdCategories           Category[]            @relation("CategoryCreatedBy")
  updatedCategories           Category[]            @relation("CategoryUpdatedBy")
  deletedCategories           Category[]            @relation("CategoryDeletedBy")
  createdSKUS                 SKU[]                 @relation("SKUCreatedBy")
  updatedSKUS                 SKU[]                 @relation("SKUUpdatedBy")
  deletedSKUS                 SKU[]                 @relation("SKUDeletedBy")
  createdBrands               Brand[]               @relation("BrandCreatedBy")
  updatedBrands               Brand[]               @relation("BrandUpdatedBy")
  deletedBrands               Brand[]               @relation("BrandDeletedBy")
  createdProductTranslations  ProductTranslation[]  @relation("ProductTranslationCreatedBy")
  updatedProductTranslations  ProductTranslation[]  @relation("ProductTranslationUpdatedBy")
  deletedProductTranslations  ProductTranslation[]  @relation("ProductTranslationDeletedBy")
  createdCategoryTranslations CategoryTranslation[] @relation("CategoryTranslationCreatedBy")
  updatedCategoryTranslations CategoryTranslation[] @relation("CategoryTranslationUpdatedBy")
  deletedCategoryTranslations CategoryTranslation[] @relation("CategoryTranslationDeletedBy")
  createdBrandTranslations    BrandTranslation[]    @relation("BrandTranslationCreatedBy")
  updatedBrandTranslations    BrandTranslation[]    @relation("BrandTranslationUpdatedBy")
  deletedBrandTranslations    BrandTranslation[]    @relation("BrandTranslationDeletedBy")
  createdUserTranslations     UserTranslation[]     @relation("UserTranslationCreatedBy")
  updatedUserTranslations     UserTranslation[]     @relation("UserTranslationUpdatedBy")
  deletedUserTranslations     UserTranslation[]     @relation("UserTranslationDeletedBy")
  createdVariants             Variant[]             @relation("VariantCreatedBy")
  updatedVariants             Variant[]             @relation("VariantUpdatedBy")
  deletedVariants             Variant[]             @relation("VariantDeletedBy")
  createdVariantOptions       VariantOption[]       @relation("VariantOptionCreatedBy")
  updatedVariantOptions       VariantOption[]       @relation("VariantOptionUpdatedBy")
  deletedVariantOptions       VariantOption[]       @relation("VariantOptionDeletedBy")
  createdOrders               Order[]               @relation("OrderCreatedBy")
  updatedOrders               Order[]               @relation("OrderUpdatedBy")
  deletedOrders               Order[]               @relation("OrderDeletedBy")
  soldOrders                  Order[]               @relation("Shop")

  deletedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([status])
  @@index([roleId])
  @@index([deletedAt])
}

model UserTranslation {
  id          Int     @id @default(autoincrement())
  userId      Int
  languageId  String  @db.VarChar(10)
  address     String? @db.VarChar(500)
  description String?

  // Relations
  user     User     @relation("User", fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  language Language @relation(fields: [languageId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  // Audit fields
  createdById Int?
  createdBy   User? @relation("UserTranslationCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("UserTranslationUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("UserTranslationDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([languageId])
  @@index([deletedAt])
}

model VerificationCode {
  id          Int                  @id @default(autoincrement())
  identifier  String               @db.VarChar(500)  // email or phone
  code        String               @db.VarChar(255)
  type        VerificationCodeType
  attempts    Int                  @default(0)  // Number of attempts made (wrong times - tried)
  maxAttempts Int                  @default(5)  // Max times allowed to try
  isUsed      Boolean              @default(false)  // Mark if the code has been used or is disabled
  resendCount Int                  @default(0)
  
  deliveryMethod OTPDeliveryMethod @default(EMAIL)  // How the code was sent

  userId      Int?
  user        User?                @relation(fields: [userId], references: [id], onDelete: Cascade)

  expiresAt   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  usedAt      DateTime?

  @@index([identifier, type, isUsed]) // For checking if there's an active code for the identifier and type
  @@index([expiresAt])  // For cleaning up expired codes
  @@index([identifier, code, type]) // For finding and validating codes
  @@index([userId]) // For finding codes related to a user
  @@index([createdAt])  // For analytics
  @@index([type, deliveryMethod]) // For analytics

  // @@map("verification_codes")
}

model Device {
  id         Int      @id @default(autoincrement())
  userId     Int
  userAgent  String   @db.Text
  ip         String   @db.VarChar(45)
  lastActive DateTime @updatedAt
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())

  // Relations
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  refreshTokens RefreshToken[]

  @@index([userId])
  @@index([isActive])
}

model RefreshToken {
  token     String   @unique @db.VarChar(1000)
  userId    Int
  deviceId  Int
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  device Device @relation(fields: [deviceId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([expiresAt])
  @@index([userId])
}

model Permission {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(500)
  description String     @default("")
  path        String     @db.VarChar(1000)
  method      HTTPMethod
  module      String     @default("") @db.VarChar(500)

  // Relations
  roles Role[]

  // Audit fields
  createdById Int?
  createdBy   User? @relation("PermissionCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("PermissionUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("PermissionDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([method])
  @@index([module])
  @@index([deletedAt])
}

model Role {
  id          Int     @id @default(autoincrement())
  name        String  @unique @db.VarChar(500)
  description String  @default("")
  isActive    Boolean @default(true)

  // Relations
  permissions Permission[]
  users       User[]

  // Audit fields
  createdById Int?
  createdBy   User? @relation("RoleCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("RoleUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("RoleDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isActive])
  @@index([deletedAt])
}

model Product {
  id           Int      @id @default(autoincrement())
  publishedAt  DateTime?
  name         String   @db.VarChar(500)
  basePrice    Float
  virtualPrice Float
  brandId      Int
  images       String[]

  // Relations
  brand               Brand                @relation(fields: [brandId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  categories          Category[]
  variants            Variant[]
  skus                SKU[]
  reviews             Review[]
  productTranslations ProductTranslation[]
  orders              Order[]
  productSKUSnapshots ProductSKUSnapshot[]

  // Audit fields
  createdById Int
  createdBy   User  @relation("ProductCreatedBy", fields: [createdById], references: [id], onDelete: Cascade, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("ProductUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("ProductDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([brandId])
  @@index([publishedAt])
  @@index([basePrice])
  @@index([deletedAt])
}

model ProductTranslation {
  id          Int    @id @default(autoincrement())
  productId   Int
  languageId  String @db.VarChar(10)
  name        String @db.VarChar(500)
  description String

  // Relations
  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  language Language @relation(fields: [languageId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  // Audit fields
  createdById Int?
  createdBy   User? @relation("ProductTranslationCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("ProductTranslationUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("ProductTranslationDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, languageId])
  @@index([productId])
  @@index([languageId])
  @@index([deletedAt])
}

model Category {
  id               Int     @id @default(autoincrement())
  name             String  @db.VarChar(500)
  logo             String? @db.VarChar(1000)
  parentCategoryId Int?

  // Relations
  products             Product[]
  parentCategory       Category?             @relation("ParentCategoryCategories", fields: [parentCategoryId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  childrenCategories   Category[]            @relation("ParentCategoryCategories")
  categoryTranslations CategoryTranslation[]

  // Audit fields
  createdById Int?
  createdBy   User? @relation("CategoryCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("CategoryUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("CategoryDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([parentCategoryId])
  @@index([deletedAt])
}

model CategoryTranslation {
  id          Int    @id @default(autoincrement())
  categoryId  Int
  languageId  String @db.VarChar(10)
  name        String @db.VarChar(500)
  description String

  // Relations
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  language Language @relation(fields: [languageId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  // Audit fields
  createdById Int?
  createdBy   User? @relation("CategoryTranslationCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("CategoryTranslationUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("CategoryTranslationDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([categoryId, languageId])
  @@index([categoryId])
  @@index([languageId])
  @@index([deletedAt])
}

model Variant {
  id             Int             @id @default(autoincrement())
  name           String          @db.VarChar(500)
  productId      Int
  
  // Relations
  product        Product         @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  variantOptions VariantOption[]

  // Audit fields
  createdById Int?
  createdBy   User? @relation("VariantCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("VariantUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("VariantDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@index([deletedAt])
}

model VariantOption {
  id        Int     @id @default(autoincrement())
  value     String  @db.VarChar(500)
  variantId Int
  
  // Relations
  variant Variant @relation(fields: [variantId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  skus    SKU[]

  // Audit fields
  createdById Int?
  createdBy   User? @relation("VariantOptionCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("VariantOptionUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("VariantOptionDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([variantId])
  @@index([deletedAt])
}

model SKU {
  id        Int    @id @default(autoincrement())
  value     String @db.VarChar(500)
  price     Float
  stock     Int
  image     String @db.VarChar(1000)
  productId Int

  // Relations
  product             Product              @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  variantOptions      VariantOption[]
  cartItems           CartItem[]
  productSKUSnapshots ProductSKUSnapshot[]

  // Audit fields
  createdById Int
  createdBy   User  @relation("SKUCreatedBy", fields: [createdById], references: [id], onDelete: Cascade, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("SKUUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("SKUDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@index([price])
  @@index([stock])
  @@index([deletedAt])
}

model Brand {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(500)
  logo String @db.VarChar(1000)

  // Relations
  products          Product[]
  brandTranslations BrandTranslation[]

  // Audit fields
  createdById Int?
  createdBy   User? @relation("BrandCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("BrandUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("BrandDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([deletedAt])
}

model BrandTranslation {
  id          Int    @id @default(autoincrement())
  brandId     Int
  languageId  String @db.VarChar(10)
  name        String @db.VarChar(500)
  description String

  // Relations
  brand    Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  language Language @relation(fields: [languageId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  // Audit fields
  createdById Int?
  createdBy   User? @relation("BrandTranslationCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("BrandTranslationUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("BrandTranslationDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([brandId, languageId])
  @@index([brandId])
  @@index([languageId])
  @@index([deletedAt])
}

model CartItem {
  id       Int @id @default(autoincrement())
  quantity Int
  skuId    Int
  userId   Int

  // Relations
  sku  SKU  @relation(fields: [skuId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, skuId])
  @@index([userId])
  @@index([skuId])
}

model ProductSKUSnapshot {
  id          Int    @id @default(autoincrement())
  productName String @db.VarChar(500)
  skuPrice    Float
  image       String @db.VarChar(1000)
  skuValue    String @db.VarChar(500)
  quantity    Int
  skuId       Int?
  orderId     Int?
  productId   Int?

  /// [ProductTranslations]
  productTranslations Json

  // Relations
  sku     SKU?     @relation(fields: [skuId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  order   Order?   @relation(fields: [orderId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  product Product? @relation(fields: [productId], references: [id], onDelete: SetNull, onUpdate: NoAction)

  createdAt DateTime @default(now())

  @@index([orderId])
  @@index([productId])
}

model Order {
  id       Int         @id @default(autoincrement())
  userId   Int
  status   OrderStatus
  shopId   Int?
  paymentId Int

  /// [Receiver]
  receiver Json

  // Relations
  user      User                 @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  shop      User?                @relation("Shop", fields: [shopId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  payment   Payment              @relation(fields: [paymentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  items     ProductSKUSnapshot[]
  products  Product[]
  reviews   Review[]

  // Audit fields
  createdById Int?
  createdBy   User? @relation("OrderCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("OrderUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("OrderDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([status])
  @@index([shopId])
  @@index([paymentId])
  @@index([status, deletedAt])
  @@index([deletedAt])
}

model Payment {
  id     Int           @id @default(autoincrement())
  status PaymentStatus

  // Relations
  orders Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
}

model Review {
  id          Int    @id @default(autoincrement())
  content     String
  rating      Int    @db.SmallInt
  orderId     Int
  productId   Int
  userId      Int
  updateCount Int    @default(0)

  // Relations
  order   Order         @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  product Product       @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user    User          @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  medias  ReviewMedia[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([orderId, productId])
  @@index([userId])
  @@index([productId])
  @@index([rating])
}

model ReviewMedia {
  id       Int       @id @default(autoincrement())
  url      String    @db.VarChar(1000)
  type     MediaType
  reviewId Int

  // Relations
  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  createdAt DateTime @default(now())

  @@index([reviewId])
  @@index([type])
}

model PaymentTransaction {
  id                 Int      @id @default(autoincrement())
  gateway            String   @db.VarChar(100)
  transactionDate    DateTime @default(now())
  accountNumber      String?  @db.VarChar(100)
  subAccount         String?  @db.VarChar(250)
  amountIn           Int      @default(0)
  amountOut          Int      @default(0)
  accumulated        Int      @default(0)
  code               String?  @db.VarChar(250)
  transactionContent String?  @db.Text
  referenceNumber    String?  @db.VarChar(255)
  body               String?  @db.Text

  createdAt DateTime @default(now())

  @@index([gateway])
  @@index([transactionDate])
  @@index([accountNumber])
}

model Message {
  id         Int    @id @default(autoincrement())
  fromUserId Int
  toUserId   Int
  content    String @db.Text

  // Relations
  fromUser User @relation("FromUser", fields: [fromUserId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  toUser   User @relation("ToUser", fields: [toUserId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  readAt    DateTime?
  createdAt DateTime  @default(now())

  @@index([fromUserId])
  @@index([toUserId])
  @@index([readAt])
  @@index([createdAt])
}

model Websocket {
  id     String @id @db.VarChar(255)
  userId Int

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  createdAt DateTime @default(now())

  @@index([userId])
}

// Enums
enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

enum OrderStatus {
  PENDING_PAYMENT
  PENDING_PICKUP
  PENDING_DELIVERY
  DELIVERED
  RETURNED
  CANCELLED
}

enum VerificationCodeType {
  REGISTER
  FORGOT_PASSWORD
  DISABLE_2FA
}

enum OTPDeliveryMethod {
  EMAIL
  SMS
  VOICE
  WHATSAPP
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum HTTPMethod {
  GET
  POST
  PUT
  DELETE
  PATCH
  OPTIONS
  HEAD
}

enum MediaType {
  IMAGE
  VIDEO
}